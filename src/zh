#!/usr/bin/python
# encoding: utf-8
#
# Copyright (c) 2017 Dean Jackson <deanishe@deanishe.net>
#
# MIT Licence. See http://opensource.org/licenses/MIT
#
# Created on 2017-12-15
#

"""zh [options] [<query>]

ZotHero - Alfred workflow for Zotero.

Usage:
    zh search <query>
    zh fields [<query>]
    zh attachments <id> [<query>]
    zh citations <id> [<query>]
    zh copy <style> <id>
    zh config [<query>]
    zh select [--style <key>] [<query>]
    zh clear
    zh --help

Options:
    -s <key>, --style=<key>       The currently-selected style.
    -h, --help                    Show this message and exit.

"""

from __future__ import print_function, absolute_import

import os
from operator import attrgetter
import sys

sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'lib'))

from docopt import docopt
from workflow import Workflow3, ICON_WARNING, ICON_WEB


log = None

# Citation styles for CMD and OPT
CITE_STYLE_CMD = os.getenv('CITE_CMD')
CITE_STYLE_OPT = os.getenv('CITE_OPT')
VERSION = os.getenv('alfred_workflow_version') or ''

# GitHub repo to check for updates
UPDATE_SETTINGS = {
    'github_slug': 'deanishe/zothero',
    'prereleases': '-beta' in VERSION,
}

# URLs for help & docs
URL_ISSUES = 'https://github.com/deanishe/zothero/issues'
URL_DOCS = 'https://github.com/deanishe/zothero/blob/master/README.md'

# Workflow icons
ICON_ON = 'icons/on.png'
ICON_OFF = 'icons/off.png'
ICON_RELOAD = 'icons/reload.png'
ICON_UPDATE_AVAILABLE = 'icons/update-available.png'
ICON_UPDATE_OK = 'icons/update-ok.png'
ICON_HELP = 'icons/help.png'
ICON_DOCS = 'icons/docs.png'
ICON_ISSUE = 'icons/issue.png'


def do_fields(query):
    """View/filter available search fields."""
    from zothero.index import COLUMNS as cols
    if query:  # remove columns that don't start with `query`
        query = query.lower()
        cols = [col for col in cols if col.startswith(query)]

    for col in cols:
        wf.add_item(col.title(),
                    'Search in "{}"'.format(col),
                    arg=col + ':',
                    valid=True,
                    uid=col)

    wf.warn_empty('No matching columns', 'Try a different query?')
    wf.send_feedback()


def do_search(query):
    """Search the Zotero database."""
    from zothero import app
    from zothero.formatting import EntryFormatter
    from zothero.icons import entry_icon
    from zothero.index import COLUMNS

    style_cmd = style_opt = None
    if CITE_STYLE_CMD:
        style_cmd = app.styles.get(CITE_STYLE_CMD)
        log.debug(u'CMD style: %s', style_cmd.name)

    if CITE_STYLE_OPT:
        style_opt = app.styles.get(CITE_STYLE_OPT)
        log.debug(u'OPT style: %s', style_opt.name)

    # Get entries matching query
    entries = app.search(query)

    # ------------------------------------------------------------------
    # If no entries, show "Search XYZ" message or "no results" warning
    if not entries:
        if query.endswith(':'):  # probably a category...
            col = query[:-1]
            if col in COLUMNS:
                wf.add_item(u'Search "{}"…'.format(col.title()))

        # Message wasn't added; show warning
        wf.warn_empty('No matches found', 'Try a different query?')

    # ------------------------------------------------------------------
    # Create and send Alfred feedback
    for i, e in enumerate(entries):
        log.debug(u'%4d. %s', i + 1, e)
        f = EntryFormatter(e)
        sub = u'{} {}'.format(f.creators, f.year)
        url = 'zotero://select/items/{}_{}'.format(e.library, e.key)
        if e.attachments:
            sub += u' Attachments: ' + str(len(e.attachments))

        if e.notes:
            large = u'\n\n'.join(e.notes)
        else:
            large = e.title or u'xxx'

        it = wf.add_item(e.title or u'xxx',
                         sub,
                         uid=e.id,
                         arg=e.id,
                         icon=entry_icon(e),
                         copytext=url,
                         largetext=large,
                         valid=True)

        it.setvar('action', 'open-in-zotero')
        it.setvar('url', url)
        it.setvar('id', e.id)

        # ------------------------------------------------------------------
        # Citations
        if style_cmd:
            mod = it.add_modifier('cmd',
                                  u'Copy citation: ' + style_cmd.name)
            mod.setvar('action', 'copy-cite')
            mod.setvar('style', style_cmd.key)
            # For notification
            mod.setvar('stylename', style_cmd.name)
        else:
            it.add_modifier('cmd', u'No citation format set', valid=False)

        if style_opt:
            mod = it.add_modifier('alt',
                                  u'Copy citation: ' + style_opt.name)
            mod.setvar('action', 'copy-cite')
            mod.setvar('style', style_opt.key)
            # For notification
            mod.setvar('stylename', style_opt.name)
        else:
            it.add_modifier('alt', u'No citation format set', valid=False)

        # All citation formats
        mod = it.add_modifier('ctrl', 'View all citation formats')
        mod.setvar('action', 'show-citations')

        # ------------------------------------------------------------------
        # Attachments
        if e.attachments:
            mod = it.add_modifier('shift', 'View attachments')
            mod.setvar('action', 'show-attachments')
        else:
            mod = it.add_modifier('shift', 'No attachments', valid=False)

    wf.send_feedback()


def do_attachments(entry_id, query):
    """Filter and open an entry's attachments."""
    from zothero import app
    from zothero.util import shortpath

    e = app.entry(entry_id)

    if not e:
        wf.add_item('Unknown Entry', 'Entry was not found', icon=ICON_WARNING)
        wf.send_feedback()
        return

    if not e.attachments:
        wf.add_item('No Attachments', 'Entry has no attachments',
                    icon=ICON_WARNING)
        wf.send_feedback()
        return

    atts = e.attachments[:]
    if query:
        atts = wf.filter(query, atts, attrgetter('name'))

    for att in atts:
        if att.path:
            wf.add_item(att.name,
                        shortpath(att.path),
                        arg=att.path,
                        icon=att.path,
                        type='file',
                        icontype='fileicon',
                        valid=True)
        elif att.url:
            wf.add_item(att.name, att.url,
                        arg=att.url,
                        icon=ICON_WEB,
                        valid=True)

    wf.warn_empty('No Matching Attachments', 'Try a different query?')
    wf.send_feedback()


def do_citations(query, entry_id):
    """Filter citation formats."""
    from zothero import app

    # Get entry and styles
    e = app.entry(entry_id)
    if not e:
        raise ValueError('Unknown entry: ' + entry_id)

    styles = app.styles.all()

    # Filter styles
    if query:
        styles = wf.filter(query, styles, key=attrgetter('name'),
                           min_score=30)

    # Generate feedback
    for s in styles:
        it = wf.add_item(
            s.name,
            u'Copy citation for "{}"'.format(e.title),
            arg=s.key,
            valid=True,
        )
        it.setvar('id', entry_id)
        it.setvar('action', 'copy-cite')
        it.setvar('style', s.key)

        if s.key != CITE_STYLE_CMD:
            mod = it.add_modifier('cmd', u'Set as default format for ⌘↩')
            mod.setvar('varname', 'CITE_CMD')
            mod.setvar('varval', s.key)
            mod.setvar('action', 'set-default')
            mod.setvar('next', 'citations')
            # For notification
            mod.setvar('modkey', u'⌘↩')
            mod.setvar('stylename', s.name)

        if s.key != CITE_STYLE_OPT:
            mod = it.add_modifier('alt', u'Set as default format for ⌥↩')
            mod.setvar('varname', 'CITE_OPT')
            mod.setvar('varval', s.key)
            mod.setvar('action', 'set-default')
            mod.setvar('next', 'citations')
            # For notification
            mod.setvar('modkey', u'⌥↩')
            mod.setvar('stylename', s.name)

    wf.warn_empty('No Matching Styles', 'Try a different query?')
    wf.send_feedback()


def do_copy(style_key, entry_id):
    """Copy a citation to the pasteboard."""
    from zothero import app
    import pasteboard as pb

    wf.text_errors = True

    e = app.entry(entry_id)
    s = app.style(style_key)

    # log.debug('entry=%r', e)
    # log.debug('style=%r', s)

    if not e:
        raise ValueError('Unknown Entry: %r' % entry_id)

    if not s:
        raise ValueError('Unknown Style: %r' % style_key)

    data = app.styles.cite(e, s)
    pbdata = {
        pb.UTI_HTML: data['html'],
        pb.UTI_PLAIN: data['text'],
        pb.UTI_TEXT: data['rtf'],
    }
    pb.set(pbdata)


def do_config(query):
    """Show workflow options."""
    from zothero import app

    style_cmd = style_opt = None
    if CITE_STYLE_CMD:
        style_cmd = app.styles.get(CITE_STYLE_CMD)
        log.debug(u'CMD style: %s', style_cmd.name)

    if CITE_STYLE_OPT:
        style_opt = app.styles.get(CITE_STYLE_OPT)
        log.debug(u'OPT style: %s', style_opt.name)

    items = []  # (item params, variables) tuples
    if wf.update_available:
        items.append((dict(
            title='An Update is Available',
            subtitle=u'↩ or ⇥ to install',
            autocomplete='workflow:update',
            valid=False,
            icon=ICON_UPDATE_AVAILABLE,
        ), {}))

    else:
        items.append((dict(
            title='Workflow is Up To Date',
            subtitle=u'↩ or ⇥ to force update check',
            autocomplete='workflow:update',
            valid=False,
            icon=ICON_UPDATE_OK,
        ), {}))

    # Styles
    icon = ICON_OFF
    name = 'None'
    key = ''
    if style_cmd:
        icon = ICON_ON
        name = style_cmd.name
        key = style_cmd.key

    items.append((dict(
        title=u'⌘↩ Style: ' + name,
        subtitle=u'↩ to change style',
        valid=True,
        icon=icon,
    ), dict(
        action='choose-style',
        varname='CITE_CMD',
        modkey=u'⌘↩',
        style=key,
    )))

    icon = ICON_OFF
    name = 'None'
    key = ''
    if style_opt:
        icon = ICON_ON
        name = style_opt.name
        key = style_opt.key

    items.append((dict(
        title=u'⌥↩ Style: ' + name,
        subtitle=u'↩ to change style',
        valid=True,
        icon=icon,
    ), dict(
        action='choose-style',
        varname='CITE_OPT',
        modkey=u'⌥↩',
        style=key,
    )))

    items.append((dict(
        title='Reload Zotero Data',
        subtitle='Re-read your Zotero database',
        icon=ICON_RELOAD,
        valid=True,
    ), dict(
        action='reload',
    )))

    items.append((dict(
        title='View Documentation',
        subtitle='Open the documentation in your browser',
        icon=ICON_DOCS,
        arg=URL_DOCS,
        valid=True,
    ), dict(
        action='open-url',
        url=URL_DOCS,
    )))

    items.append((dict(
        title='Report an Issue',
        subtitle='Open GitHub issue tracker in your browser',
        icon=ICON_ISSUE,
        arg=URL_ISSUES,
        valid=True,
    ), dict(
        action='open-url',
        url=URL_ISSUES,
    )))

    # ------------------------------------------------------------------
    # Filter and display items
    if query:
        items = wf.filter(query, items, key=lambda t: t[0]['title'],
                          min_score=30)

    for kwargs, variables in items:
        it = wf.add_item(**kwargs)
        for k, v in variables.items():
            it.setvar(k, v)

    wf.warn_empty('No Matching Options', 'Try a different query?')
    wf.send_feedback()


def do_select(query, style_key):
    """Choose a default style."""
    from zothero import app

    styles = app.styles.all()
    modkey = wf.decode(os.getenv('modkey') or '')

    # Filter styles
    if query:
        styles = wf.filter(query, styles, key=attrgetter('name'),
                           min_score=30)

    for s in styles:
        icon = ICON_OFF
        valid = True
        sub = u'↩ to set this style for ' + modkey
        if s.key == style_key:
            icon = ICON_ON
            valid = False
            sub = u'Style already assigned to ' + modkey

        it = wf.add_item(s.name,
                         sub,
                         valid=valid,
                         icon=icon)
        it.setvar('varval', s.key)
        it.setvar('stylename', s.name)
        # Alfred doesn't notice changes fast enough, so turn this off
        # for the time being
        # it.setvar('next', 'config')

    wf.warn_empty('No Matching Styles', 'Try a different query?')
    wf.send_feedback()


def do_clear():
    """Remove cached data."""
    wf.clear_cache(lambda fn: fn.endswith('.sqlite'))


def main(wf):
    """Run workflow."""
    import zothero

    wf.args  # call to ensure any magic arguments are intercepted
    args = docopt(__doc__)
    query = wf.decode(args.get('<query>') or '')
    entry_id = int(args['<id>']) if args['<id>'] else None
    log.debug('args=%r', args)

    # Zotero data directories
    datadir = os.getenv('ZOTERO_DIR') or None
    attachdir = os.getenv('ATTACHMENTS_DIR') or None
    if datadir:
        datadir = wf.decode(datadir)
    if attachdir:
        attachdir = wf.decode(attachdir)

    app = zothero.ZotHero(wf.cachedir, datadir, attachdir)
    # Store app and Workflow3 in `zothero` package where everything
    # can access them.
    zothero.app = app
    zothero.wf = wf

    if args['attachments']:
        return do_attachments(entry_id, query)

    if args['citations']:
        return do_citations(query, entry_id)

    if args['clear']:
        return do_clear()

    if args['config']:
        return do_config(args['<query>'])

    if args['copy']:
        return do_copy(args['<style>'], entry_id)

    if args['fields']:
        return do_fields(query)

    if args['search']:
        return do_search(query)

    if args['select']:
        return do_select(query, args['--style'])

    raise ValueError('Unknown command')


if __name__ == '__main__':
    wf = Workflow3(
        update_settings=UPDATE_SETTINGS,
        help_url=URL_ISSUES,
    )
    log = wf.logger
    wf.run(main)
